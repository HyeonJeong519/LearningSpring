### MVC Pattern?

어플리케이션을 세 개의 영역으로 분할한 후 각 구성 요소에게 고유한 역할을 부여하는 개발 방식

도메인(비즈니스 로직) 영역과 UI 영역이 분리되어 서로 영향을 주지 않고 유지보수 가능

### 패턴 구조

**Model - Data, 정보들의 가공을 담당하는 컴포넌트**

어플리케이션의 정보, 데이터를 나타낸다. 데이터베이스, 처음 정의하는 상수, 초기화 값, 변수 등을 뜻한다. 비즈니스 로직을 처리한 후 모델의 변경사항을 컨트롤러와 뷰에 전달한다.

- 사용자가 편집하기 원하는 모든 데이터를 가지고 있어야함
- 뷰나 컨트롤러에 대해서 어떠한 정보도 알지 말아야함
- 변경이 발생하면 변경 통지에 대한 처리 방법을 구현해야함

**View - 사용자에게 보여지는 부분 = UI**

여러개의 뷰가 존재할 수 있으며, 모델에게 질의하여 데이터를 전달받는다. 받은 데이터를 화면에 표시해주는 역할을 하며 모델에게 전달받은 데이터를 별도로 저장하지 않아야한다. 사용자가 화면에 표시된 내용을 변경하게 되면 모델에게 전달하여 모델을 변경해야 한다.

- 모델이 가지고 있는 정보를 따로 저장해서는 안됨
- 모델이나 컨트롤러와 같이 다른 구성요소들을 몰라야 함
- 변경이 일어나면 변경통지에 대한 처리방법을 구현해야 함

**Controller - 모델과 뷰 사이를 이어주는 브릿지**

모델이나 뷰는 서로의 존재를 모르고 있어 변경 사항을 외부에 알리고 수신하는 방법만 있다. 컨트롤러능 이를 중재하기 위해 모델과 뷰에 대해 알고 있어야 한다. 모델이나 뷰로부터 변경 내용을 통지 받으면 이를 각 구성 요소에게 통지해야 한다. 사용자가 어플리케이션을 조작하여 발생하는 변경 이벤트를 처리하는 역할을 수행한다.

- 모델이나 뷰에 대해서 알고 있어야 함
- 모델이나 뷰의 변경을 모니터링 해야 함

### MVC Pattern 사용 이유?

유지보수의 편리성
